version: "3.9"

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: chatbot-back:dev
    container_name: chatbot-back
    env_file: .env
    ports:
      - "8010:8010"
    command: >
      uvicorn main:app
      --host 0.0.0.0
      --port 8010
      --reload
      --reload-dir /app
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8010/health"]  # /health 로 통일
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - chatbot

  postgres:
    image: pgvector/pgvector:0.8.0-pg17
    container_name: chatbot-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DATABASE}          
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_SHARED_BUFFERS=4GB
      - POSTGRES_WORK_MEM=4MB
      - POSTGRES_MAINTENANCE_WORK_MEM=1GB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=12GB
    ports:
      - "5432:5432"
    volumes:
      - ./docker/data/pgsql/data:/var/lib/postgresql/data
      - ./docker/data/pgsql/config:/etc/postgresql
      - ./docker/data/pgsql/logs:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-chatbot} -d ${POSTGRES_DATABASE:-chatbot}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - chatbot
  redis:
    image: redis:7-alpine
    container_name: chatbot-redis
    ports:
      - "6379:6379"
    command: ["redis-server","--appendonly","yes","--requirepass","redis"]
    volumes:
      - ./docker/data/redis/data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - chatbot
  opensearch:
    image: opensearchproject/opensearch:2.12.0
    profiles: ["search"]                  # <- 이걸 사용해 조절 
    container_name: opensearch
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true    # dev only (운영에선 활성화/인증 필수)
      - OPENSEARCH_JAVA_OPTS=-Xms2g -Xmx2g
    ulimits:
      memlock: { soft: -1, hard: -1 }
    ports: ["9200:9200","9600:9600"]
    volumes:
      - os-data:/usr/share/opensearch/data
    networks:
      - chatbot
  dashboards:
    image: opensearchproject/opensearch-dashboards:2.12.0
    profiles: ["search"]                  
    container_name: os-dashboards
    environment:
      - OPENSEARCH_HOSTS=http://opensearch:9200
      - OPENSEARCH_SECURITY_ENABLED=false     # dev only
    ports: ["5601:5601"]
    depends_on: [opensearch]
    networks:
      - chatbot
volumes:
  os-data:

networks:
  chatbot:
    name: chatbot