version: "3.9"

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: chatbot-back:dev
    container_name: chatbot-back
    env_file: .env
    ports:
      - "8010:8010"
    command: >
      uvicorn api.main:app
      --host 0.0.0.0
      --port 8010
      --reload
      --reload-dir /app/api
    volumes:
      - ./api:/app/api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8010/health"]  # ← /health 로 통일
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  postgres:
    image: pgvector/pgvector:0.8.0-pg17
    container_name: chatbot-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DATABASE}          # ← = 문법
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_SHARED_BUFFERS=4GB
      - POSTGRES_WORK_MEM=4MB
      - POSTGRES_MAINTENANCE_WORK_MEM=1GB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=12GB
    ports:
      - "5432:5432"
    volumes:
      - ./docker/data/pgsql/data:/var/lib/postgresql/data
      - ./docker/data/pgsql/config:/etc/postgresql
      - ./docker/data/pgsql/logs:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-chatbot} -d ${POSTGRES_DATABASE:-chatbot}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: chatbot-redis
    ports:
      - "6379:6379"
    command: ["redis-server","--appendonly","yes"]
    volumes:
      - ./docker/data/redis/data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

